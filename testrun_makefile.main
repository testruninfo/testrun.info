#       ------------------------------------------------------------------------
#
#       Copyright 2017 Markus Toepfer
#
#       Licensed under the Apache License, Version 2.0 (the "License");
#       you may not use this file except in compliance with the License.
#       You may obtain a copy of the License at
#
#               http://www.apache.org/licenses/LICENSE-2.0
#
#       Unless required by applicable law or agreed to in writing, software
#       distributed under the License is distributed on an "AS IS" BASIS,
#       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#       See the License for the specific language governing permissions and
#       limitations under the License.
#
#       ------------------------------------------------------------------------
#
#       File            testrun_makefile.main
#       Authors         Markus Toepfer
#       Date            2017-12-01
#
#       Project         [PROJECT]
#
#       Description     Generic makefile for testrun based projects.
#
#                       Target of this makefile is an independent library
#                       or executable to be installed at either PREFIX/lib
#                       or PREFIX/bin.
#
#       Usage           SHOULD be used included by parent makefile
#
#       Dependencies    testrun (makefile & service scripts), doxygen (if used)
#
#       Last changed    2017-12-01
#       ------------------------------------------------------------------------

# Switch on colors
GCC_COLORS ?= 'gcc colors available, use them!'
export GCC_COLORS

# ----- PARAMETER DEFINITION --------------------------------------------------

# CFLAGS
# -g            enable Debugging symbols
# -Ox           code optimization
# -Wall         enable Warnings
# -Wextra       additional Warnings

CFLAGS		= -c -Wall -Wextra -fPIC
CFLAGS		+= $(EXTRAHEADER)
CFLAGS		+= $(MODCFLAGS)

PROJECTPATH	:= $(abspath $(dir $(PROJECTMK)))
DIRNAME		:= $(notdir $(patsubst %/,%,$(dir $(PROJECTMK))))

LIBNAME		:= lib$(DIRNAME)
LIBNAMEPC	:= $(LIBNAME).pc

INSTALL		:= install

INCDIR		:= $(PREFIX)/include/$(DIRNAME)
LIBDIR		:= $(PREFIX)/lib
EXECDIR		:= $(PREFIX)/bin
PRODIR		:= $(LIBDIR)/$(DIRNAME)

EXECUTABLE	= bin/$(DIRNAME)

CFLAGS		+= -Iinclude

MODMAKE		:= $(patsubst %,./src/%/mod.mk,$(MODULES))

STATIC		= build/lib$(DIRNAME).a
SHARED		= $(patsubst %.a,%.so,$(STATIC))

# Source and object files to compile
SOURCES		= $(wildcard ./src/**/*.c ./src/*.c)
OBJECTS		= $(patsubst %.c,%.o,$(SOURCES))


# ----- DEFAULT MAKE RULES ----------------------------------------------------

%.o : %.c
	@echo " (CC)    $@"
	@$(CC) $(CFLAGS) -g -o $@ -c $< $(LIBS)

all:		all_lib
install:	install_lib
uninstall:	uinstall_lib

all_lib:	start lib tests pkgconfig done
all_exec:	start lib tests $(EXECUTABLE) done
all_service:	all_exec

lib:		build sources
sources:	build $(STATIC) $(SHARED)

$(STATIC):  $(OBJECTS)
	@echo " (AR)    $@ $(OBJECTS)"
	@ar rcs $@ $(OBJECTS)
	@ranlib $@

$(SHARED): $(STATIC) $(OBJECTS)
	@echo " (CC)    $@ $(OBJECTS)"
	@$(CC) -shared -o $@ $(OBJECTS) $(LIBS)

$(EXECUTABLE): $(OBJECTS)
	@echo " (CC)    $@ $(OBJECTS)"
	$(CC) -o $@ $(STATIC) $(LIBS)


# ----- BUILD & CLEANUP -----------------------------------------------------

build:
	@mkdir -p bin
	@mkdir -p build
	@mkdir -p build/test
	@mkdir -p build/test/omp
	@mkdir -p build/test/omp/unit
	@mkdir -p build/test/omp/acceptance
	@mkdir -p build/test/unit
	@mkdir -p build/test/acceptance
	@mkdir -p build/test/log
	@echo " (MK)    directories for build"

.PHONY: clean
clean:
	@echo " (CLEAN) $(LIBNAME)"
	@rm -rf build bin doxygen/documentation $(OBJECTS) $(TESTS_OBJECTS) \
		$(LIBNAMEPC) $(TESTS_TMP_FILES)


# ----- DOCUMENATION -------------------------------------------------------

#NOTE requires doxygen.PHONY: documentation
documentation:
	doxygen ./doxygen/doxygen.config


# ----- PKGCONFIG LIBRARY BUILD --------------------------------------------

.PHONY: pkgconfig
pkgconfig:
	@echo 'prefix='$(PREFIX)                     >  $(LIBNAMEPC)
	@echo 'exec_prefix=$${prefix}'               >> $(LIBNAMEPC)
	@echo 'libdir=$${prefix}/lib'                >> $(LIBNAMEPC)
	@echo 'includedir=$${prefix}/include'        >> $(LIBNAMEPC)
	@echo ''                                     >> $(LIBNAMEPC)
	@echo 'Name: '$(LIBNAME)                     >> $(LIBNAMEPC)
	@echo 'Description: '                        >> $(LIBNAMEPC)
	@echo 'Version: '$(VERSION)                  >> $(LIBNAMEPC)
	@echo 'URL: '$(PROJECT_URL)                  >> $(LIBNAMEPC)
	@echo 'Libs: -L$${libdir} -l'$(DIRNAME)      >> $(LIBNAMEPC)
	@echo 'Cflags: -I$${includedir}'             >> $(LIBNAMEPC)


# ----- INSTALLATION -------------------------------------------------------

# Installation as a library ------------------------------------------------

install_lib: $(SHARED) $(STATIC)
	@echo " (OK)    installed $(LIBNAME) to $(LIBDIR)"
	@mkdir -p $(PRODIR)
	@mkdir -p $(LIBDIR)/pkgconfig
	@mkdir -p $(INCDIR)
	@$(INSTALL) -m 0644 -t $(INCDIR) $(shell find include -name "*.h")
	@$(INSTALL) -m 0755 $(SHARED) $(PRODIR)
	@$(INSTALL) -m 0755 $(STATIC) $(PRODIR)
	@$(INSTALL) -m 0644 $(LIBNAMEPC) $(LIBDIR)/pkgconfig
	@ldconfig $(PRODIR)

uninstall_lib:
	@echo " (OK)    uninstalled $(LIBNAME) from $(LIBDIR)"
	@rm -rf $(INCDIR)
	@rm -rf $(PRODIR)
	@rm -rf $(PRODIR)/$(LIBNAME).a
	@rm -rf $(PRODIR)/$(LIBNAME).so
	@rm -rf $(LIBDIR)/pkgconfig/$(LIBNAMEPC)

# Installation as an executable --------------------------------------------

install_exec: $(SHARED) $(STATIC)
	@echo " (OK)    installed $(DIRNAME) to $(EXECDIR)"
	@$(INSTALL) -m 0755 bin/$(DIRNAME) $(EXECDIR)

uninstall_exec:
	@echo " (OK)    uninstalled $(DIRNAME) from $(EXECDIR)"
	@rm -rf $(EXECDIR)/$(DIRNAME)

# Installation as a service (outsourced to script)--------------------------

install_service: $(EXECUTABLE)
	./config/install/install.sh

uninstall_service:
	./config/install/uninstall.sh


# ----- INFORMATION PRINTING -----------------------------------------------

# print out a variable of the make file (e.g. "make print-PROJECTPATH")
.PHONY: print
print-%  : ; @echo $* = $($*)

.PHONY: start
start:
	@echo "\n (HINT)    $(PROJECT) \t\t ==> running make\n"

.PHONY: done
done:
	@echo
	@echo " (DONE)  make $(PROJECT)"
	@echo " (HINT)  with unit testing      ==> 'make tested'"
	@echo " (HINT)  perform installation   ==> 'sudo make install\n"
	@echo " (HINT)  generate documentation ==> 'make documentation\n"
